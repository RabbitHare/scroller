#include <LoadSaveLevel.h>
#include <Scene.h>
#include <libxml/xmlwriter.h>

static void
ParseLayer (xmlDocPtr doc, xmlNodePtr node)
{
	using namespace std;
	Map *map = GetScene()->GetMap();
	Layer *lay = new Layer();
	xmlChar *value;
	char* tdata=NULL;
	xmlNodePtr tnode;
	node = node->xmlChildrenNode;

	while (node)
	{

		if (!xmlStrcmp (node->name, BAD_CAST "width"))
		{
			value = xmlNodeListGetString (doc, node->xmlChildrenNode, 1);
			lay->width = atoi ((char*)value);
			if (value)
				xmlFree (value);
		}
		else if (!xmlStrcmp (node->name, BAD_CAST "height"))
		{
			value = xmlNodeListGetString (doc, node->xmlChildrenNode, 1);
			lay->height = atoi ((char*)value);
			if (value)
				xmlFree (value);
		}
		else if (!xmlStrcmp (node->name, BAD_CAST "depth"))
		{
			value = xmlNodeListGetString (doc, node->xmlChildrenNode, 1);
			lay->depth = atof ((char*)value);
			if (value)
				xmlFree (value);
		}
		else if (!xmlStrcmp (node->name, BAD_CAST "tile"))
		{
			tnode = node->xmlChildrenNode;
			while (tnode)
			{
				if (!xmlStrcmp (tnode->name, BAD_CAST "width"))
				{
					value = xmlNodeListGetString (doc, tnode->xmlChildrenNode, 1);
					lay->tileW = atof ((char*)value);
					if (value)
						xmlFree (value);
				}
				else if (!xmlStrcmp (tnode->name, BAD_CAST "height"))
				{
					value = xmlNodeListGetString (doc, tnode->xmlChildrenNode, 1);
					lay->tileH = atof ((char*)value);
					if (value)
						xmlFree (value);
				}
				else if (!xmlStrcmp (tnode->name, BAD_CAST "data"))
				{
					tdata = (char*)xmlNodeListGetString (doc, tnode->xmlChildrenNode, 1);
				}
				tnode = tnode->next;
			}
		}
		node = node->next;
	}
	if (tdata)
	{
		if (lay->tiles)
			delete[] lay->tiles;
		lay->tiles = new int[lay->width*lay->height];
		char *c = strtok (tdata,",\n\t\r");
		int i=0;
		while (c)
		{
			lay->tiles[i] = atoi(c);
			c = strtok (NULL,",\n\t\r");
			i++;
		}
		delete[] tdata;
	}
	// insert layer according to depth
	Layer *l = map->layers.First();
	for(;l != map->layers.End(); l=l->next)
	{
		if (l->depth > lay->depth)
			break;
	}
	map->layers.Insert (l->prev, lay);

}
void LoadLevel (const char* fn)
{
	using namespace std;
	xmlDocPtr doc;
	xmlNodePtr root,
		   node;

	doc = xmlParseFile (fn);
	if (doc == NULL)
	{
		cerr << "Could not load level: " << fn << "\n";
		return;
	}
	root = xmlDocGetRootElement (doc);
	if (root == NULL)
	{
		cerr << "Empty level file: " << fn << "\n";
		xmlFreeDoc (doc);
		return;
	}

	node = root->xmlChildrenNode;
	while (node)
	{
		if (!xmlStrcmp (node->name, BAD_CAST "layer"))
		{
			ParseLayer (doc, node);
		}
		node = node->next;
	}

	xmlFreeDoc (doc);
	xmlCleanupParser ();
	xmlMemoryDump ();
}
void SaveLevel (const char* fn)
{
	using namespace std;
	xmlDocPtr doc;
	xmlTextWriterPtr writer;
	int rc;
	stringstream ss;

	Scene *scene = GetScene ();
	Map *map = scene->GetMap ();

	writer = xmlNewTextWriterDoc (&doc, 0);
	if (writer == NULL)
	{
		cerr << "***SaveLevel: Error creating xml writer\n";
		return;
	}
	rc = xmlTextWriterStartDocument (writer,NULL,NULL,NULL);
	if (rc < 0)
	{
		cerr << "***SaveLevel: Error at xmlTextWritterStartDocument\n";
		return;
	}

	xmlTextWriterStartElement (writer, BAD_CAST"level");


	

	// layers
	Layer *lay = map->layers.First();
	for (;lay != map->layers.End(); lay=lay->next)
	{
		xmlTextWriterStartElement (writer, BAD_CAST "layer");
		// width height
		xmlTextWriterWriteFormatElement (writer, BAD_CAST "width", "%d", lay->width);
		xmlTextWriterWriteFormatElement (writer, BAD_CAST "height", "%d", lay->height);
		xmlTextWriterWriteFormatElement (writer, BAD_CAST "depth", "%f", lay->depth);
		// tiles
		xmlTextWriterStartElement (writer, BAD_CAST "tile");
		xmlTextWriterWriteFormatElement (writer, BAD_CAST "width", "%f", lay->tileW);
		xmlTextWriterWriteFormatElement (writer, BAD_CAST "height", "%f", lay->tileH);
		// data
		ss.flush();
		ss << '\n';
		for (int y=0; y < lay->height; y++)
		{
			for (int x=0; x < lay->width; x++)
			{
				ss << lay->tiles[y*lay->width+x];
				ss << ',';
			}
			ss << '\n';
		}
		xmlTextWriterWriteElement (writer, BAD_CAST "data", BAD_CAST ss.str().c_str());
		xmlTextWriterEndElement (writer); // tile
		

		xmlTextWriterEndElement (writer); // layer
	}
	xmlTextWriterEndElement (writer); // level

	xmlFreeTextWriter (writer);
	xmlSaveFormatFile (fn, doc, 1);
	xmlFreeDoc (doc);

	xmlCleanupParser ();
	xmlMemoryDump ();


}

